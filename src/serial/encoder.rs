// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncoderData {
    #[prost(enumeration = "Location", tag = "1")]
    pub location: i32,
    #[prost(sint32, tag = "2")]
    pub position: i32,
}
impl ::prost::Name for EncoderData {
    const NAME: &'static str = "EncoderData";
    const PACKAGE: &'static str = "";
    fn full_name() -> ::prost::alloc::string::String {
        "EncoderData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/EncoderData".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Location {
    FrontRight = 0,
    BackRight = 1,
    BackLeft = 2,
    FrontLeft = 3,
}
impl Location {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Location::FrontRight => "FRONT_RIGHT",
            Location::BackRight => "BACK_RIGHT",
            Location::BackLeft => "BACK_LEFT",
            Location::FrontLeft => "FRONT_LEFT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRONT_RIGHT" => Some(Self::FrontRight),
            "BACK_RIGHT" => Some(Self::BackRight),
            "BACK_LEFT" => Some(Self::BackLeft),
            "FRONT_LEFT" => Some(Self::FrontLeft),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
